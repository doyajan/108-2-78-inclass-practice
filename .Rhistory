bSchoolRegex
bSchoolRegex <- str_extract_all(differentMajors,"休閒與運動管理學系|休運系|金融系|金融與合作經營學系|金融與合作學系" )
bSchoolRegex
#regex：開頭的一串數字
newlevel_year <- stringr::str_extract(level_year,"^[0-9]+[0-9]")
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
#levels是用在factor的function，先轉factor
studentHeights$學年度 <- factor(studentHeights$學年度)
#levels是用在factor的function，先轉factor
studentHeights$學年度 <- factor(studentHeights$學年度)
studentHeights$年齡 <- factor(studentHeights$年齡)
level_year <- levels(studentHeights$學年度)
level_age <- levels(studentHeights$年齡)
sort(level_year)
sort(level_age)
#regex：開頭的一串數字
newlevel_year <- stringr::str_extract(level_year,"^[0-9]+[0-9]")
newlevel_age <- stringr::str_extract(level_age,"^[0-9]+")
as.integer(newlevel_year) -> newlevel_year
as.integer(newlevel_age) -> newlevel_age
sort(newlevel_year) -> newlevel_year
sort(newlevel_age) -> newlevel_age
names(newlevel_year) <- newlevel_year
names(newlevel_age) <- newlevel_age
studentHeights$學年度 <- factor(studentHeights$學年度, names(newlevel_year))
studentHeights$年齡 <- factor(studentHeights$年齡, names(newlevel_age))
levels(studentHeights$學年度)
levels(studentHeights$年齡)
class(studentHeights$學年度)
class(studentHeights$年齡)
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- "不動(產)?與?(城鄉)?(環境)?學?系"
# 這裡也可以偷懶不細分字群，而把所有的字「元」都加? 除了一定要出現的字「元」才不加，即
realEstateRegex <-
"不動產?與?城?鄉?環?境?學?系"
# realEstateRegex
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- "不動(產)?與?(城鄉)?(環境)?學?系"
# 這裡也可以偷懶不細分字群，而把所有的字「元」都加? 除了一定要出現的字「元」才不加，即
realEstateRegex <-
"不動產?與?城?鄉?環?境?學?系"
realEstateRegex
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
realEstateRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
bSchoolRegex <-
"(金融(與合作)?(經營)?|休(閒與)?運(動管理)?)學?系"
# 或偷懶
bSchoolRegex <-
"(金融與?合?作?經?營?|休閒?與?運動?管?理?)學?系"
# bSchoolRegex
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome)
length(cpiByIncome)
names(cpiByIncome)
cpiByIncome[[1]]
cpiByIncome[[1]]
View(cpiByIncome)
cpiByIncome[[1]]
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome)
length(cpiByIncome)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
cpiByIncome[[1]]
names(cpiByIncome)
length(cpiByIncome)
View(cpiByIncome)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
factor(badEmployers$law)-> badEmployers$law
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
factor(badEmployers$law)-> badEmployers$law
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
ymd(badEmployers$dt) -> badEmployers$dt
View(studentHeights)
View(cpiByIncome)
read_csv("https://www.dropbox.com/s/xjzg1iuuws7tcha/table.csv?dl=1") -> table
source("https://www.dropbox.com/s/5oy56om4q0857tt/student10.R?dl=1",encoding = "UTF-8")
levels=table$國文[c(16:1)
levels=table$國文[c(16:1)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools)==
tpe_highSchools <- factor(tpe_highSchools,levels = c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學"))
tpe_highSchools <- factor(tpe_highSchools,levels = c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學"))
tpe_highSchools
levels(tpe_highSchools)
length(tpe_highSchools)
tpe_highSchools[[680]] <- "北一女"
levels(tpe_highSchools) <- c(levels(tpe_highSchools), "北一女")
length(tpe_highSchools) #679
levels(tpe_highSchools) <- c(levels(tpe_highSchools), "北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女")
length(tpe_highSchools) #679
levels(tpe_highSchools) <- c(levels(tpe_highSchools), "北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女")
length(tpe_highSchools) #679
levels(tpe_highSchools) <- c(levels(tpe_highSchools), "北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女","北一女")
tpe_highSchools[[680]] <- "北一女"
length(tpe_highSchools) #679
length(tpe_highSchools) #679
tpe_highSchools[[680]] <- "北一女"
tpe_highSchools[[681]] <- "北一女"
tpe_highSchools[[682]] <- "北一女"
tpe_highSchools[[683]] <- "北一女"
tpe_highSchools[[684]] <- "北一女"
tpe_highSchools[[685]] <- "北一女"
tpe_highSchools[[686]] <- "北一女"
tpe_highSchools[[687]] <- "北一女"
tpe_highSchools[[688]] <- "北一女"
tpe_highSchools[[689]] <- "北一女"
length(tpe_highSchools) #679
length(tpe_highSchools) #679
levels(tpe_highSchools) <- c(levels(tpe_highSchools), "北一女")
length(tpe_highSchools) #679
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(levels(tpe_highSchools),"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(levels(tpe_highSchools),"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(levels(tpe_highSchools),"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_extract_all(levels(tpe_highSchools),"臺?台?北市?立?第?一女?子?高?級?中?學?)
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
realEstateRegex <- "不動(產)?與?(城鄉)?(環境)?學?系"
# 這裡也可以偷懶不細分字群，而把所有的字「元」都加? 除了一定要出現的字「元」才不加，即
realEstateRegex <-
"不動產?與?城?鄉?環?境?學?系"
realEstateRegex
不動產
str_extract_all("不動產?與?城?鄉?環?境?學?系")
str_extract_all("不動產?與?城?鄉?環?境?學?系")
str_extract_all(differentMajors,"不動產?與?城?鄉?環?境?學?系")
str_extract_all(levels(differentMajors),"不動產?與?城?鄉?環?境?學?系")
str_extract_all(levels(differentMajors),"不動產?與?城?鄉?環?境?學?系")
str_extract_all(levels(differentMajors),"不動產?與?城?鄉?環?境?學?系")
tpfg <- "臺?台?北?市?立?第?一女?子?高?級?中?學?"
str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
str_view_all(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
stringr::str_extract(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?")
stringr::str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
stringr::str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
stringr::str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
stringr::str_view(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?)
stringr::str_view_all(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?")
regex_hs1st <-
stringr::str_extract_all(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?")
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
regex_hs1st <- unlist(regex_hs1st)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
stringr::str_extract_all(tpe_highSchools,"臺?台?北?市?立?第?一女?子?高?級?中?學?")
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <-
stringr::str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
regex_hs1st <- unlist(regex_hs1st)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <-
stringr::str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
regex_hs1st <- unlist(regex_hs1st)
stringr::str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_extract_all(tpe_highSchools,"臺?台?北市?立?第?一女子?(高級)?中?學?")
stringr::str_view_all(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_count(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_length(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_length(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_view(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
stringr::str_view(tpe_highSchools,"臺?台?北市?立?第?一女子?高?級?中?學?")
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
levels(tpe_highSchools)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
regex_hsTitle <- "(?=高|中|學)"
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <-
str_extract_all("(?=高|中|學)")
regex_hsTitle <-
str_extract_all(tpe_highSchools,"(?=高|中|學)")
regex_hsTitle <-
str_extract_all(tpe_highSchools,"(?=高|中|學)")
regex_hsTitle <-
str_extract_all(tpe_highSchools,"(?=高|中|學)")
str_extract_all(tpe_highSchools,"(?=高|中|學)")
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
regex_hsTitle <-
str_extract_all(tpe_highSchools,"(?=高|中|學)")
regex_hs1st <- "臺?台?北?市?立?第?一女?子?(高級)?中?學?"
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <-levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hs1st <- "臺?台?北?市?立?第?一女?子?(高級)?中?學?"
regex_hs1st <- unlist(regex_hs1st)
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <-levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(?=高|中|學)"
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <- "(?=[高中學])"
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
View(data228)
levels(data228$檔號)
levels(data228$檔號) -> data1
str_extract(data1,"[:graph:]+(?=////00)")
str_extract(data1,"[:graph:]+(?=////00)")
data1
data1
Veiw(data1)
View(data1)
str_extract(data228$檔號,"[:graph:]+(?=////00)")
str_extract(data228$檔號,"[:alnum:]+(?=////00)")
levels(data228$檔號) -> data1
str_extract(data228$檔號,"[:alnum:]+(?=/00)")
levels(data228$檔號)
`全宗名編號`<- factor(str_extract(data228$檔號,"[:alnum:]+(?=/00)"))
`全宗名編號`-> levels(data228)
`全宗名編號`-> levels(data228)
`全宗名編號`-> levels(data228)
`全宗名編號`<- factor(str_extract(data228$檔號,"[:alnum:]+(?=/00)"))
`全宗名編號`-> levels(data228)
`全宗名編號`<- as.factor(str_extract(data228$檔號,"[:alnum:]+(?=/00)"))
`全宗名編號`-> levels(data228)
levels(data228)
levels(data228) -> dataLevels
levels(data228) -> dataLevels
`全宗名編號`<- as.factor(str_extract(data228$檔號,"[:alnum:]+(?=/00)"))
dataLevels
unlist(dataLevels) -> dataLevels
dataLevels
as.factor(dataLevels) -> dataLevels
dataLevels
levels(as.factor(data228) -> dataLevels
levels(as.factor(data228)) -> dataLevels
levels(as.factor(data228)) -> dataLevels
levels(data228[[1]]) -> dataLevels
dataLevels
as.factor(data228) -> NEW_data228
as.factor(data228) -> NEW_data228
names(data228[[1]]) -> names_data228
names_data228
names_data228
names(data228[[1]]) -> names_data228
names_data228
names(data228[[1]]) -> names_data228
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
names(data228[[1]]) -> names_data228
names_data228
names_data228
names(data228[[1]]) -> names_data228
names_data228
name_228 <- map(data228, ~ .x$檔名)
name_228 <- map(data228, ~ .x$檔名)
name_228 <- map(data228, ~ .x$檔名)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
View(courseStructure)
View(courseStructure)
str_extract_all(courseStructure$應修系級,[:graph:]+系(?=[:digit:](!?A))
str_extract_all(courseStructure$應修系級,[:graph:]+系(?=[:digit:](!?A))
str_extract_all(courseStructure$應修系級,[:graph:]+系[:digit:](!?A))
str_extract_all(courseStructure$應修系級,([:graph:]+系[:digit:](!?A))
str_extract_all(courseStructure$應修系級,([:graph:]+系[:digit:](!?A)))
str_extract_all(courseStructure$應修系級,([:graph:]+系[:digit:](!?A)))
str_extract_all(courseStructure$應修系級,"[:graph:]+系[:digit:](!?A)")
str_extract_all(courseStructure$應修系級,"[:graph:]+系[:digit:]")
class(majorGradeCombos)
majorGradeCombos <-
str_extract_all(courseStructure$應修系級,"[:graph:]+系[:digit:]")
class(majorGradeCombos)
majorGradeCombos  <- unlist(majorGradeCombos)
class(majorGradeCombos)
majorGradeCombos
str_extract_all(courseStructure$應修系級,"經濟系[:digit:]")
pick_econ <- courseStructure$應修系級 == "經濟系[:digit:]"
names(courseStructure$應修系級[pick_econ])
names(courseStructure$科目名稱[pick_econ])
courseStructure$科目名稱[pick_econ]
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系[:digit:]"
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系3"
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系3A"
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系3A|經濟系3B"
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系3A|經濟系3B"
courseStructure$科目名稱[pick_econ]
pick_econ <- courseStructure$應修系級 == "經濟系3A|經濟系3B"
courseStructure$科目名稱[pick_econ]
pick_econA <- courseStructure$應修系級 == "經濟系3A"
courseStructure$科目名稱[pick_econA]
courseStructure$科目名稱[pick_econA&pick_econB]
pick_econB <- courseStructure$應修系級 == "經濟系3B
courseStructure$科目名稱[pick_econA&pick_econB]
courseStructure$科目名稱[pick_econA&pick_econB]
pick_econB <- courseStructure$應修系級 == "經濟系3B
str_extract_all(courseStructure$應修系級,"經濟系[:digit:]")
pick_econA <- courseStructure$應修系級 == "經濟系3A"
pick_econA <- courseStructure$應修系級 == "經濟系3A"
pick_econB <- courseStructure$應修系級 == "經濟系3B
courseStructure$科目名稱[pick_econB]
# econ101junior
pick_econB <- courseStructure$應修系級 == "經濟系3B
pick_econB <- courseStructure$應修系級 == "經濟系3B
courseStructure$科目名稱[pick_econB]
pick_econB <- courseStructure$應修系級 == "經濟系3B
pick_econB <- courseStructure$應修系級 == "經濟系3B"
courseStructure$科目名稱[pick_econB]
pick_econA <- courseStructure$應修系級 == "經濟系3A"
courseStructure$科目名稱[pick_econA]
pick_econA <- courseStructure$應修系級 == "經濟系3A"
courseStructure$科目名稱[pick_econA&pick_econB]
courseStructure$科目名稱[pick_econA&pick_econB]
pick_econA <- courseStructure$應修系級 == "經濟系3A"
pick_econB <- courseStructure$應修系級 == "經濟系3B"
courseStructure$科目名稱[pick_econA&pick_econB]
courseStructure$科目名稱[pick_econA|pick_econB]
courseStructure$科目名稱[pick_econB]
courseStructure$科目名稱[pick_econA|pick_econB]
str_extract_all(courseStructure$應修系級,"經濟系[:digit:]")
pick_econ3A <- courseStructure$應修系級 == "經濟系3A"
pick_econ3B <- courseStructure$應修系級 == "經濟系3B"
courseStructure$科目名稱[pick_econ3A|pick_econ3B] -> econ3course
map(courseStructure$科目名稱, ~.x[c("entranceYear","major")])
map(courseStructure$科目名稱,str_extrat_all(~.x[c("entranceYear","major")])
map(courseStructure$科目名稱,str_extrat_all(~.x[c("entranceYear","major")])
map(courseStructure$科目名稱, ~str_extrat_all(.x,c("entranceYear","major"))
map(courseStructure$科目名稱, ~str_extrat_all(.x,c("entranceYear","major"))
courseStructure$科目名稱[pick_econ3A|pick_econ3B] -> econ3course
# econ101junior
econ3course
levels(econ3course)
levels(econ3course)
factor(econ3course)
econ3cours <- factor(econ3course)
econ3cours
econ3cours <- c(levels(factor))
econ3cours <- c(levels(econ3course))
econ3course
econ3course
econ3cours <- character(econ3course)
econ3cours <- character(econ3course)
econ3cours <- as.character(econ3course)
econ3course
econ3cours
econ3course
econ3course[[1]] -> econ101junior
econ101junior
class(econ101junior)
pick_econ3A <- courseStructure$應修系級 == "經濟系3A"
pick_econ3B <- courseStructure$應修系級 == "經濟系3B"
courseStructure$科目名稱[pick_econ3A|pick_econ3B] -> econ3course
econ3course <- as.character(econ3course)
econ3course[[1]] -> econ101junior
class(econ101junior)
econ101junior
majorGradeCombos <-
str_extract_all(courseStructure$應修系級,"[:graph:]+系[:digit:]")
majorGradeCombos  <- unlist(majorGradeCombos)
class(majorGradeCombos)
majorGradeCombos
regex_hsTitle
regex_hsTitle <- "(?=[高中學])"
regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
levels(tpe_highSchools)
data228$附註[[表冊名稱:臺灣省二二八事變正法及死亡人犯名冊]]
str_extract_all(data228$附註,"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊")
str_view_all(data228$附註,"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊")
str_view_all(data228$附註,"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊")
# victims
str_view_all(data228$附註,"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊")
str_view_all(data228$附註,"表冊名稱:臺灣省二二八事變正法及死亡人犯名冊")
# victims
map(courseStructure$科目名稱, ~str_extrat_all(.x,c("entranceYear","major"))
map(courseStructure$科目名稱, ~.x,c("entranceYear","major"))
map(courseStructure$科目名稱, ~.x[c("entranceYear","major")])
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
majorGradeCombos <-
str_extract_all(courseStructure$應修系級,"[:graph:]+系[:digit:]")
majorGradeCombos  <- unlist(majorGradeCombos)
class(majorGradeCombos)
majorGradeCombos
majorGradeCombos <- unique(majorGradeCombos)
class(majorGradeCombos)
majorGradeCombos
majorGradeCombos <- unique(majorGradeCombos)
majorGradeCombos
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
# 中日韓字元strip模版： [\u4E00-\u9FFF]
regex1 <- "[\u4E00-\u9FFF]+系[司法學財經組]*[0-9]"
regex1 <- "[\u4E00-\u9FFF]+系(司法組|法學組|財經法組)?[0-9]"
regex_wrong <- "[:graph:]+系[司法學財經組]*[1-9]"
regex1 <- "[^、]+系[司法學財經組]*[1-9]"
str_extract_all(
courseStructure$應修系級,
regex1
) %>% # 得到list
unlist() %>% # 得到vector
unique() -> # 不重覆
majorGradeCombos
majorGradeCombos
pick_econ3A <- courseStructure$應修系級 == "經濟系3A"
pick_econ3B <- courseStructure$應修系級 == "經濟系3B"
courseStructure$科目名稱[pick_econ3A|pick_econ3B] -> econ3course
econ3course <- as.character(econ3course)
econ3course[[1]] -> econ101junior
class(econ101junior)
econ101junior
(courseStructure$學年 == "103" &
str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses
courseStructure$科目名稱[pick_courses] %>%
unique() -> econ101junior
# econ101junior
econ101junior
knitr::opts_chunk$set(echo = TRUE)
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
library(stringr)
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 先執行此行輸入學號
readline(prompt = "210651008") -> studentId
